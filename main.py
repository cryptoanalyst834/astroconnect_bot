import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand
from fastapi import FastAPI
from contextlib import asynccontextmanager
from fastapi.middleware.cors import CORSMiddleware

from config import TOKEN
from database import init_db
from handlers.start import router as start_router
from handlers.profile import router as profile_router
from api import api_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(start_router)
dp.include_router(profile_router)

# Lifespan (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ FastAPI)
@asynccontextmanager
async def lifespan(app: FastAPI):
    await init_db()
    yield

# FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(lifespan=lifespan)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–æ–º–µ–Ω —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ –ø—Ä–æ–¥–µ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–æ—É—Ç–µ—Ä API
app.include_router(api_router)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
async def set_default_commands(bot: Bot):
    commands = [
        BotCommand(command="/start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="/edit", description="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É"),
    ]
    await bot.set_my_commands(commands)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start_bot():
    await set_default_commands(bot)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ FastAPI
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(start_bot())
