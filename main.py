import os
import asyncio
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware

from astro_utils import generate_natal_chart
from database import create_db_and_tables, save_user
from models import User

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS (–µ—Å–ª–∏ frontend –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
class Form(StatesGroup):
    name = State()
    birth_date = State()
    birth_time = State()
    birth_place = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram-–±–æ—Ç–∞
@dp.message(F.text, Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    await state.set_state(Form.birth_date)

@dp.message(Form.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã —Ä–æ–¥–∏–ª—Å—è? (—á—á:–º–º):")
    await state.set_state(Form.birth_time)

@dp.message(Form.birth_time)
async def process_birth_time(message: Message, state: FSMContext):
    await state.update_data(birth_time=message.text)
    await message.answer("–ì–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è?")
    await state.set_state(Form.birth_place)

@dp.message(Form.birth_place)
async def process_birth_place(message: Message, state: FSMContext):
    await state.update_data(birth_place=message.text)
    data = await state.get_data()

    try:
        sun_sign, asc_sign = generate_natal_chart(
            data['birth_date'], data['birth_time'], data['birth_place']
        )

        user = User(
            telegram_id=str(message.from_user.id),
            name=data['name'],
            birth_date=data['birth_date'],
            birth_time=data['birth_time'],
            birth_place=data['birth_place'],
            sun_sign=sun_sign,
            asc_sign=asc_sign
        )
        await save_user(user)

        await message.answer(f"üåû –°–æ–ª–Ω—Ü–µ: {sun_sign}\nüî≠ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç: {asc_sign}")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        print(e)

    await state.clear()

# –ó–∞–ø—É—Å–∫ FastAPI + Telegram polling
@app.on_event("startup")
async def on_startup():
    await create_db_and_tables()
    asyncio.create_task(dp.start_polling(bot))
