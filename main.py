import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from fastapi import FastAPI
from database import init_db, add_user_profile, get_all_profiles
from models import UserProfile
from astro_utils import generate_astrology_data
from aiogram.types import FSInputFile
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from starlette.responses import JSONResponse
import os
from dotenv import load_dotenv
from states import RegistrationState

load_dotenv()

# --- Logging ---
logging.basicConfig(level=logging.INFO)

# --- Bot Setup ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN, parse_mode=ParseMode.MARKDOWN)
dp = Dispatcher(storage=MemoryStorage())

# --- FastAPI Setup ---
app = FastAPI()

@app.get("/profiles")
async def read_profiles():
    profiles = await get_all_profiles()
    return profiles

# --- Bot Handlers ---

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    WELCOME_TEXT = (
        "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroConnect!* ‚ú®\n\n"
        "üîÆ –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ –∑–≤—ë–∑–¥–∞–º ‚Äî —Å –ø–æ–º–æ—â—å—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.\n\n"
        "ü™ê *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n"
        "‚Äî –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É\n"
        "‚Äî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "‚Äî –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n\n"
        "üöÄ *–ì–æ—Ç–æ–≤(–∞) –Ω–∞—á–∞—Ç—å?* –ñ–º–∏ /profile, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É!"
    )
    await message.answer(WELCOME_TEXT)

@dp.message(Command("profile"))
async def create_profile(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegistrationState.name)

@dp.message(RegistrationState.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ö–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª—Å—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
    await state.set_state(RegistrationState.birth_date)

@dp.message(RegistrationState.birth_date)
async def process_birth_date(message: types.Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await message.answer("–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç—ã —Ä–æ–¥–∏–ª—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)")
    await state.set_state(RegistrationState.birth_time)

@dp.message(RegistrationState.birth_time)
async def process_birth_time(message: types.Message, state: FSMContext):
    await state.update_data(birth_time=message.text)
    await message.answer("–ì–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è? (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞)")
    await state.set_state(RegistrationState.birth_place)

@dp.message(RegistrationState.birth_place)
async def process_birth_place(message: types.Message, state: FSMContext):
    await state.update_data(birth_place=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    await state.set_state(RegistrationState.photo)

@dp.message(RegistrationState.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(photo_id=file_id)

    data = await state.get_data()

    astro_data = await generate_astrology_data(
        birth_date=data["birth_date"],
        birth_time=data["birth_time"],
        birth_place=data["birth_place"]
    )

    await add_user_profile(
        telegram_id=message.from_user.id,
        name=data["name"],
        birth_date=data["birth_date"],
        birth_time=data["birth_time"],
        birth_place=data["birth_place"],
        photo_id=file_id,
        zodiac_sign=astro_data["zodiac_sign"],
        ascendant=astro_data["ascendant"]
    )

    await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.")
    await state.clear()

# --- Startup ---

async def on_startup():
    await init_db()
    logging.info("Bot and DB initialized")

if __name__ == "__main__":
    asyncio.run(on_startup())
    dp.run_polling(bot)
