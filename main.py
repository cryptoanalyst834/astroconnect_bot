import asyncio
import logging
import os

from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from config import TOKEN, RAILWAY_APP_URL
from database import init_db
from api import api_router
from handlers.profile import router as profile_router

logging.basicConfig(level=logging.INFO)

app = FastAPI()
app.include_router(api_router)

bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.include_router(profile_router)

WELCOME_TEXT = """
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroConnect!</b>

–ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.

AstroConnect –ø–æ–º–æ–∂–µ—Ç:
‚Äî –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∑–≤—ë–∑–¥–∞–º
‚Äî –ò–∑–±–µ–∂–∞—Ç—å —Ç–æ–∫—Å–∏—á–Ω—ã—Ö —Å–≤—è–∑–µ–π
‚Äî –ü–æ–Ω—è—Ç—å, –∫—Ç–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
‚Äî –†–∞—Å–∫—Ä—ã—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ª–∏—á–Ω–æ—Å—Ç–∏

–í—ã –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä—É–∫–∞—Ö. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
"""

start_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")]
    ]
)

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=start_keyboard, parse_mode="HTML")

@app.on_event("startup")
async def on_startup():
    await init_db()
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    webhook_url = f"{RAILWAY_APP_URL}/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("Webhook —É–¥–∞–ª—ë–Ω")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
