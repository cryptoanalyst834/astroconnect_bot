import logging
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from fastapi import FastAPI
from database import async_session_maker, init_db
from models import User
from astro_utils import generate_astrology_data
from datetime import datetime
from states import RegistrationState
import asyncio
import os

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

logging.basicConfig(level=logging.INFO)

# Start
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    text = (
        "üåå <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroConnect</b> ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n\n"
        "üîÆ –ú—ã –ø–æ–¥–±–∏—Ä–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –ø–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
        "‚ù§Ô∏è –ù–∞–π–¥–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ ‚Äî –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É ‚ú®\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await state.set_state(RegistrationState.name)
    await message.answer(text)

# –ò–º—è
@dp.message(RegistrationState.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(RegistrationState.birth_date)
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")

# –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(RegistrationState.birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    try:
        birth_date = datetime.strptime(message.text, "%Y-%m-%d").date()
        await state.update_data(birth_date=birth_date.isoformat())
        await state.set_state(RegistrationState.birth_time)
        await message.answer("üïí –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ß–ß:–ú–ú):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")

# –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(RegistrationState.birth_time)
async def process_birth_time(message: Message, state: FSMContext):
    try:
        birth_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(birth_time=birth_time.strftime("%H:%M"))
        await state.set_state(RegistrationState.birth_place)
        await message.answer("üåç –í–≤–µ–¥–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

# –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(RegistrationState.birth_place)
async def process_birth_place(message: Message, state: FSMContext):
    await state.update_data(birth_place=message.text)
    await state.set_state(RegistrationState.photo)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∫–µ—Ç—ã:")

# –§–æ—Ç–æ –∏ —Ñ–∏–Ω–∞–ª
@dp.message(RegistrationState.photo)
async def process_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
        return
    file_id = message.photo[-1].file_id
    data = await state.get_data()

    natal_data = generate_astrology_data(
        date_str=data["birth_date"],
        time_str=data["birth_time"],
        place=data["birth_place"]
    )

    async with async_session_maker() as session:
        user = User(
            telegram_id=message.from_user.id,
            name=data["name"],
            birth_date=data["birth_date"],
            birth_time=data["birth_time"],
            birth_place=data["birth_place"],
            zodiac=natal_data["zodiac"],
            ascendant=natal_data["ascendant"],
            photo_id=file_id
        )
        session.add(user)
        await session.commit()

    await message.answer_photo(
        photo=file_id,
        caption=(
            f"‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            f"–ò–º—è: {data['name']}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']} {data['birth_time']}\n"
            f"–ú–µ—Å—Ç–æ: {data['birth_place']}\n"
            f"–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {natal_data['zodiac']}\n"
            f"–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç: {natal_data['ascendant']}\n\n"
            f"–°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∞–Ω–∫–µ—Ç—ã üöÄ"
        )
    )
    await state.clear()

@app.on_event("startup")
async def on_startup():
    await init_db()
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
