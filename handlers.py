from aiogram import Router, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, InlineKeyboardMarkup,
    InlineKeyboardButton, WebAppInfo
)
from aiogram.fsm.context import FSMContext
from states import RegisterState
from database import save_user, get_user

router = Router()

@router.message(F.text == "/start")
async def start_cmd(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üå† –û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∫–µ—Ç—ã",
            web_app=WebAppInfo(url="https://preeminent-kelpie-cd4c81.netlify.app/")
        )]
    ])
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AstroConnect! ‚ú®\n–ù–∞–∂–º–∏ /register, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –∞–Ω–∫–µ—Ç—ã –Ω–∏–∂–µ.",
        reply_markup=markup
    )

@router.message(F.text == "/register")
async def register_start(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(RegisterState.name)

@router.message(RegisterState.name)
async def register_gender(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–≤–æ–π –ø–æ–ª? (–ú / –ñ)")
    await state.set_state(RegisterState.gender)

@router.message(RegisterState.gender)
async def register_birth_date(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è? (–¥–¥.–º–º.–≥–≥–≥–≥)")
    await state.set_state(RegisterState.birth_date)

@router.message(RegisterState.birth_date)
async def register_birth_time(message: Message, state: FSMContext):
    await state.update_data(birth_date=message.text)
    await message.answer("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è? (—á—á:–º–º, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî —É–∫–∞–∂–∏ 12:00)")
    await state.set_state(RegisterState.birth_time)

@router.message(RegisterState.birth_time)
async def register_birth_city(message: Message, state: FSMContext):
    await state.update_data(birth_time=message.text)
    await message.answer("–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è?")
    await state.set_state(RegisterState.birth_city)

@router.message(RegisterState.birth_city)
async def register_location_city(message: Message, state: FSMContext):
    await state.update_data(birth_city=message.text)
    await message.answer("–ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –∂–∏–≤–µ—à—å?")
    await state.set_state(RegisterState.location_city)

@router.message(RegisterState.location_city)
async def register_looking_for(message: Message, state: FSMContext):
    await state.update_data(location_city=message.text)
    await message.answer("–ö–æ–≥–æ —Ç—ã –∏—â–µ—à—å? (–ú / –ñ)")
    await state.set_state(RegisterState.looking_for)

@router.message(RegisterState.looking_for)
async def register_about(message: Message, state: FSMContext):
    await state.update_data(looking_for=message.text)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):")
    await state.set_state(RegisterState.about)

@router.message(RegisterState.about)
async def register_photo(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (1 —à—Ç):")
    await state.set_state(RegisterState.photo)

@router.message(RegisterState.photo, F.photo)
async def register_complete(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    data = await state.get_data()
    data["telegram_id"] = message.from_user.id
    save_user(data)
    await state.clear()
    await message.answer("–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üéâ", reply_markup=ReplyKeyboardRemove())

@router.message(F.text == "/profile")
async def profile(message: Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /register.")
    else:
        name, gender, birth_date, _, _, location, _, about, _, _ = user[1:10]
        await message.answer(f"üë§ {name} ({gender})\nüìç {location}\nüìÖ {birth_date}\nüí¨ {about}")
