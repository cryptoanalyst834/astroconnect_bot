from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database import connect
from flatlib.chart import Chart
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib import const
import datetime

router = Router()

# Helper: calculate compatibility (–∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–∫–æ–≤)
def calculate_compatibility(user1, user2):
    return 70  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—Å—Ç—Ä–æ—Å–∏–Ω–∞—Å—Ç—Ä–∏—é

def get_users_for_discover(current_id):
    conn = connect()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE telegram_id != %s ORDER BY created_at DESC LIMIT 10", (current_id,))
    users = cur.fetchall()
    conn.close()
    return users

@router.message(F.text == "/discover")
async def discover_users(message: Message):
    users = get_users_for_discover(message.from_user.id)
    if not users:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        return

    for user in users:
        name, gender, birth_date, _, _, city, _, about, photo_id, _ = user[1:]
        percent = calculate_compatibility(message.from_user.id, user[0])
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíò –õ–∞–π–∫", callback_data=f"like:{user[0]}"),
             InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip:{user[0]}")]
        ])
        text = f"üë§ {name}, {gender}\nüìç {city}\nüìÖ {birth_date}\nüí¨ {about}\n‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {percent}%"
        if photo_id:
            await message.bot.send_photo(chat_id=message.chat.id, photo=photo_id, caption=text, reply_markup=kb)
        else:
            await message.answer(text, reply_markup=kb)
        break  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∑–∞ —Ä–∞–∑

@router.callback_query(F.data.startswith("like"))
async def like_user(callback: CallbackQuery):
    await callback.message.answer("–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫! ‚ù§Ô∏è (—Å–∏—Å—Ç–µ–º–∞ –º–∞—Ç—á–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    await callback.answer()

@router.callback_query(F.data.startswith("skip"))
async def skip_user(callback: CallbackQuery):
    await callback.message.answer("–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π /discover —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    await callback.answer()